#!/bin/bash
# "dot" - a tiny static blog generator written with bash and unix tools

# exit on any error
# set -e

# set up folder variables
scriptD=$(cd `dirname $0` && pwd)"/"
templateSourceD=$scriptD"project.template/"

projectD=$2"/"
templateD=$projectD"frontend/html/"
articleD=$projectD"data/articles/"
pageD=$projectD"data/pages/"

articleHtmlD=$projectD"_rendered/articles/"
pageHtmlD=$projectD"_rendered/pages/"
htmlD=$projectD"_rendered/"
imgSourceD=$htmlD"assets/"
stylesSourceD=$htmlD"css/"
scriptsSourceD=$htmlD"js/"

imgD=$htmlD"images/"
stylesD=$htmlD"styles/"
scriptsD=$htmlD"scripts/"

# set up file variables
templateF="$templateD""article.html"
indexF="$htmlD""index.html"
indexHeaderF="$templateD""indexPre.html"
indexItemF="$templateD""indexItem.html"
indexFooterF="$templateD""indexPost.html"

tempF=$templateD"_temp.html"

markdownFiles=()

# help
if [ -z "${1}" ]; then
  echo;
  echo "[DOT - a tiny static blog generator]"
  echo;
  echo "Usage:";
  echo "./dot init  ~/blogname";
  echo "./dot new   ~/blogname articleName";
  echo "./dot build ~/blogname";
  echo;
  exit 0
fi

# init a new project structure
if [ $1 == "init" ]; then
  mkdir -p "$projectD"
  cp -r $templateSourceD* $projectD
  exit 0
fi

# init a new article
if [ $1 == "new" ]; then
  dirN="$articleD"$(date +"%Y_%m_%d_%H_%M")
  mkdir -p "$dirN"
  touch "$dirN"/$3".md"
  exit 0
fi

# build everything
if [ $1 == "build" ]; then
  # make sure html folder is clean before we re-create
  rm -r "$articleHtmlD"*.html > /dev/null 2>&1
  rm -r "$pageHtmlD"*.html > /dev/null 2>&1

  # add preample to index
  cat "$indexHeaderF" > "$tempF"

  # read article folders
  shopt -s nullglob
  articleFolders=($articleD*)

  # loop over article folders in reverse order:
  # youngest first
  for ((idx=${#articleFolders[@]}-1; idx>=0; idx--));
  do
    curArtD="${articleFolders[idx]}/"
    markdownFiles=($curArtD*.md)
    artMdF="${markdownFiles[0]}"
    echo "Processing '$artMdF'";

    curArticleHtmlD=$articleHtmlD$(basename "$curArtD")/
    mkdir -p $curArticleHtmlD

    articleF=$curArticleHtmlD"$(basename "$artMdF" .md).html"
    echo "Processing '$articleF'";

#
#    # extract first letter for check if file name starts with "_"
#    isPage=$(basename "$markdownF")
#    isPage=${isPage:0:1}
#
#    # extract date from filename: 2023_09_14_13_30_dot_article_2 or use
#    # current date for "pages"
#    if [ $isPage != "_" ]; then
#      filename=$(basename "$markdownF")
#      date_time=$(echo $filename | sed -E 's/([0-9]{4}_[0-9]{2}_[0-9]{2}_[0-9]{2}_[0-9]{2})_.*/\1/g')
#      year=${date_time:0:4}
#      month=${date_time:5:2}
#      day=${date_time:8:2}
#      hour=${date_time:11:2}
#      minute=${date_time:14:2}
#      dmod=$(date -d "$year-$month-$day $hour:$minute" +"%Y-%m-%d %H:%M")
#    else
#      dmod=$(date -d "@$(stat -c '%Y' "$markdownF")" +"%Y-%m-%d %H:%M")
#    fi
#
    # do the md => html conversion
    content=$(markdown "$artMdF")

    # extract headline and summary
    headline="$(echo $content | xml2asc| xmllint --html --xpath "//h2[1]/text()" -)"
    summary="$(echo $content | xml2asc | xmllint --html --xpath "//p[1]/text()" -)"
    firstImage="$(echo $content | xml2asc | xmllint --html --xpath "string(//img[1]/@src)" -)"

    if [ ! -z "${firstImage}" ]; then
      firstImage="\"@type\": \"imageObject\", \"url\": \"$firstImage\""
    fi

    # parse template for article
    awk -v h="$headline" \
        -v s="$summary" \
        -v d="$dmod" \
        -v i="$firstImage" \
        -v c="$content" \
        '{
            gsub(/\{\{HEADLINE\}\}/,h);
            gsub(/\{\{SUMMARY\}\}/,s);
            gsub(/\{\{DMOD\}\}/,d);
            gsub(/\{\{IMAGE\}\}/,i);
            gsub(/\{\{CONTENT\}\}/,c);
            print
        }' \
        "$templateF" | hxnormalize -e -l 85 > "$articleF"

    # parse template for index file item
    if [ $isPage != "_" ]; then
      awk -v h="$headline" \
          -v s="$summary" \
          -v d="$dmod" \
          -v i="$firstImage" \
          -v a="$(basename "$articleF")" \
          '{
              gsub(/\{\{HEADLINE\}\}/,h);
              gsub(/\{\{SUMMARY\}\}/,s);
              gsub(/\{\{DMOD\}\}/,d);
              gsub(/\{\{IMAGE\}\}/,i);
              gsub(/\{\{ARTICLEF\}\}/,a);
              print
          }' \
          "$indexItemF" >> "$tempF"
    fi
  done

  # add postample to index
  cat "$indexFooterF" >> "$tempF"

  # beautify index file
  hxnormalize -e -l 85 "$tempF" > "$indexF"

  # copy images and other files from source to publish
  # adds the ability to process images, styles & scripts
  # before putting them into the published folder
  # sudo rsync -a "$imgSourceD" "$imgD"
  # sudo rsync -a "$stylesSourceD" "$stylesD"
  # sudo rsync -a "$scriptsSourceD" "$scriptsD"

  # clean up
  rm "$tempF"
fi