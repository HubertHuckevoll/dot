#!/bin/bash
# "dot" - a tiny static site generator written with bash and unix tools

# exit on any error
# set -e

# set up folder variables
scriptD=$(cd `dirname $0` && pwd)"/"
projectD=$2"/"

# source folders
templateSourceD=$scriptD"project.template/"
articleD=$projectD"data/articles/"
pageD=$projectD"data/pages/"
templateD=$projectD"frontend/html/"
imgSourceD=$projectD"frontend/assets/"
stylesSourceD=$projectD"frontend/css/"
scriptsSourceD=$projectD"frontend/js/"

# target folders
htmlD=$projectD"_rendered/"
articleHtmlD=$htmlD"articles/"
pageHtmlD=$htmlD"pages/"
imgD=$htmlD"frontend/assets/"
stylesD=$htmlD"frontend/css/"
scriptsD=$htmlD"frontend/js/"

# set up file variables
articleTemplateF="$templateD""article.html"
pageTemplateF="$templateD""page.html"
indexF="$htmlD""index.html"
indexHeaderF="$templateD""indexPre.html"
indexItemF="$templateD""indexItem.html"
indexFooterF="$templateD""indexPost.html"

tempF=$templateD"_temp.html"

# help
help_show()
{
    echo "[DOT - a tiny static site generator]"
    echo;
    echo "...written with bash and some common Linux tools. Needs:"
    echo "- libxml2-utils"
    echo "- markdown"
    echo "- html-xml-utils"
    echo "- rsync"
    echo "(- busybox - for staging server)"
    #echo - (recode, optional, for retro pages)
    echo;
    echo "Usage:";
    echo "./dot init    ~/blogname";
    echo "./dot article ~/blogname articleName";
    echo "./dot page    ~/blogname pageName";
    echo "./dot build   ~/blogname";
    echo;
    exit 0
}

# init a new project structure
project_init()
{
  mkdir -p "$projectD"
  cp -r $templateSourceD* $projectD
  exit 0
}

# init a new article
article_create()
{
  dirN="$articleD"$(date +"%Y_%m_%d_%H_%M")
  mkdir -p "$dirN"
  touch "$dirN"/$3".md"
  exit 0
}

# init a new article
page_create()
{
  dirN="$pageD"/$3
  mkdir -p "$dirN"
  touch "$dirN"/$3".md"
  exit 0
}

# build everything
build()
{
  #
  #
  # build articles first
  #
  #

  # make sure html folder is clean before we re-create
  rm -r "$articleHtmlD"*.html > /dev/null 2>&1

  # add preample to index
  cat "$indexHeaderF" > "$tempF"

  # set extended options
  shopt -s nullglob

  # read article folders
  articleFolders=($articleD*)

  # loop over article folders in reverse order:
  # youngest first
  for ((idx=${#articleFolders[@]}-1; idx>=0; idx--));
  do
    curArtD="${articleFolders[idx]}/"
    markdownFiles=($curArtD*.md)
    artMdF="${markdownFiles[0]}"
    echo "Markdown '$artMdF'";

    curArticleHtmlD=$articleHtmlD$(basename "$curArtD")/
    mkdir -p "$curArticleHtmlD"
    cp "$curArtD"* "$curArticleHtmlD"
    rm $curArticleHtmlD$(basename "$artMdF")

    articleF=$curArticleHtmlD"$(basename "$artMdF" .md).html"
    echo "HTML '$articleF'";

    filename=$(basename "$curArtD")
    date_time=$(echo $filename | sed -E 's/([0-9]{4}_[0-9]{2}_[0-9]{2}_[0-9]{2}_[0-9]{2})/\1/g')
    year=${date_time:0:4}
    month=${date_time:5:2}
    day=${date_time:8:2}
    hour=${date_time:11:2}
    minute=${date_time:14:2}
    dmod=$(date -d "$year-$month-$day $hour:$minute" +"%Y-%m-%d %H:%M")

    # do the md => html conversion
    content=$(markdown "$artMdF")

    # extract headline and summary
    headline="$(echo $content | xml2asc| xmllint --html --xpath "//h2[1]/text()" -)"
    summary="$(echo $content | xml2asc | xmllint --html --xpath "//p[1]/text()" -)"
    firstImage="$(echo $content | xml2asc | xmllint --html --xpath "string(//img[1]/@src)" -)"

    if [ ! -z "${firstImage}" ]; then
      firstImage="\"@type\": \"imageObject\", \"url\": \"$firstImage\""
    fi

    # parse template for article
    awk -v h="$headline" \
        -v s="$summary" \
        -v d="$dmod" \
        -v i="$firstImage" \
        -v c="$content" \
        '{
            gsub(/\{\{HEADLINE\}\}/,h);
            gsub(/\{\{SUMMARY\}\}/,s);
            gsub(/\{\{DMOD\}\}/,d);
            gsub(/\{\{IMAGE\}\}/,i);
            gsub(/\{\{CONTENT\}\}/,c);
            print
        }' \
        "$articleTemplateF" | hxnormalize -e -l 85 > "$articleF"

    # parse template for index file item
    awk -v h="$headline" \
        -v s="$summary" \
        -v d="$dmod" \
        -v i="$firstImage" \
        -v a="/articles/$(basename "$curArtD")/$(basename "$articleF")" \
        '{
            gsub(/\{\{HEADLINE\}\}/,h);
            gsub(/\{\{SUMMARY\}\}/,s);
            gsub(/\{\{DMOD\}\}/,d);
            gsub(/\{\{IMAGE\}\}/,i);
            gsub(/\{\{ARTICLEF\}\}/,a);
            print
        }' \
        "$indexItemF" >> "$tempF"
  done

  # add postample to index
  cat "$indexFooterF" >> "$tempF"

  # beautify index file
  hxnormalize -e -l 85 "$tempF" > "$indexF"

  # clean up
  rm "$tempF"

  #
  #
  # build pages second
  #
  #

  # clean pages folder
  rm -r "$pageHtmlD"*.html > /dev/null 2>&1

  # set extended options
  # read article folders
  shopt -s nullglob
  pageFolders=($pageD*)

  # loop over pages folders
  for ((idx=${#pageFolders[@]}-1; idx>=0; idx--));
  do
    curArtD="${pageFolders[idx]}/"
    markdownFiles=($curArtD*.md)
    artMdF="${markdownFiles[0]}"
    echo "Markdown '$artMdF'";

    curArticleHtmlD=$pageHtmlD$(basename "$curArtD")/
    mkdir -p "$curArticleHtmlD"
    cp "$curArtD"* "$curArticleHtmlD"
    rm $curArticleHtmlD$(basename "$artMdF")

    articleF=$curArticleHtmlD"$(basename "$artMdF" .md).html"
    echo "HTML '$articleF'";

    # grab current date
    dmod=$(date -d "@$(stat -c '%Y' "$artMdF")" +"%Y-%m-%d %H:%M")

    # do the md => html conversion
    content=$(markdown "$artMdF")

    # extract headline and summary
    headline="$(echo $content | xml2asc| xmllint --html --xpath "//h2[1]/text()" -)"
    summary="$(echo $content | xml2asc | xmllint --html --xpath "//p[1]/text()" -)"
    firstImage="$(echo $content | xml2asc | xmllint --html --xpath "string(//img[1]/@src)" -)"

    if [ ! -z "${firstImage}" ]; then
      firstImage="\"@type\": \"imageObject\", \"url\": \"$firstImage\""
    fi

    # parse template for article
    awk -v h="$headline" \
        -v s="$summary" \
        -v d="$dmod" \
        -v i="$firstImage" \
        -v c="$content" \
        '{
            gsub(/\{\{HEADLINE\}\}/,h);
            gsub(/\{\{SUMMARY\}\}/,s);
            gsub(/\{\{DMOD\}\}/,d);
            gsub(/\{\{IMAGE\}\}/,i);
            gsub(/\{\{CONTENT\}\}/,c);
            print
        }' \
        "$pageTemplateF" | hxnormalize -e -l 85 > "$articleF"
  done

  #
  #
  # copy static assets, js, css...
  #
  #

  # copy images and other files from source to publish
  # adds the ability to process images, styles & scripts
  # before putting them into the published folder
  cp "$imgSourceD"* "$imgD"
  cp "$stylesSourceD"* "$stylesD"
  cp "$scriptsSourceD"* "$scriptsD"
}

case $1 in
    "")
        help_show
        ;;

    "project_init")
        init_project
        ;;

    "article_create")
        create_article
        ;;

    *)
        echo "Unknown command."
        ;;
esac
